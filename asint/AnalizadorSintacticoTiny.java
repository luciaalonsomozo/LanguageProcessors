
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun May 12 20:11:38 CEST 2024
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresTiny;
import java.util.ArrayList;
import ast.Types.*;
import ast.Expressions.*;
import ast.Expressions.Accesses.*;
import ast.Definitions.*;
import ast.Instructions.*;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun May 12 20:11:38 CEST 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\003\000\002\002\004\000\002\030" +
    "\004\000\002\030\004\000\002\030\004\000\002\030\004" +
    "\000\002\030\004\000\002\030\004\000\002\030\002\000" +
    "\002\031\005\000\002\031\007\000\002\031\005\000\002" +
    "\031\004\000\002\037\006\000\002\037\007\000\002\037" +
    "\006\000\002\032\010\000\002\032\010\000\002\033\010" +
    "\000\002\033\010\000\002\040\004\000\002\040\003\000" +
    "\002\036\007\000\002\036\007\000\002\035\005\000\002" +
    "\034\011\000\002\034\011\000\002\034\011\000\002\043" +
    "\003\000\002\043\002\000\002\042\005\000\002\042\003" +
    "\000\002\041\005\000\002\041\006\000\002\041\005\000" +
    "\002\041\004\000\002\045\004\000\002\045\004\000\002" +
    "\045\002\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\004" +
    "\000\002\046\007\000\002\046\007\000\002\046\007\000" +
    "\002\020\005\000\002\020\006\000\002\047\005\000\002" +
    "\047\004\000\002\047\005\000\002\052\004\000\002\052" +
    "\004\000\002\021\006\000\002\050\003\000\002\050\002" +
    "\000\002\051\005\000\002\051\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\044\005\000\002\053\007\000\002\053\011\000\002\053" +
    "\007\000\002\054\007\000\002\054\014\000\002\054\015" +
    "\000\002\054\007\000\002\054\007\000\002\054\007\000" +
    "\002\054\007\000\002\055\012\000\002\055\011\000\002" +
    "\055\012\000\002\055\011\000\002\055\011\000\002\055" +
    "\012\000\002\055\012\000\002\055\011\000\002\060\011" +
    "\000\002\060\002\000\002\061\007\000\002\062\012\000" +
    "\002\062\002\000\002\063\010\000\002\063\006\000\002" +
    "\004\005\000\002\004\003\000\002\005\005\000\002\005" +
    "\003\000\002\006\005\000\002\006\003\000\002\007\005" +
    "\000\002\007\003\000\002\007\003\000\002\010\005\000" +
    "\002\010\003\000\002\011\005\000\002\011\003\000\002" +
    "\012\004\000\002\012\003\000\002\013\004\000\002\013" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\006\000\002\022\005\000\002\022\002\000\002" +
    "\023\003\000\002\023\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\025\003" +
    "\000\002\025\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\027\003\000\002\027\003\000\002" +
    "\017\004\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\011\000\002\003\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\003\000" +
    "\002\016\003\000\002\016\006\000\002\016\005\000\002" +
    "\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\026\002\ufff9\004\011\005\021\006\025\051" +
    "\007\062\016\063\017\064\010\066\023\067\013\001\002" +
    "\000\026\002\ufff9\004\011\005\021\006\025\051\007\062" +
    "\016\063\017\064\010\066\023\067\013\001\002\000\026" +
    "\002\ufff9\004\011\005\021\006\025\051\007\062\016\063" +
    "\017\064\010\066\023\067\013\001\002\000\004\002\001" +
    "\001\002\000\004\067\u0131\001\002\000\004\017\u012b\001" +
    "\002\000\050\003\uff7f\011\uff7f\016\uff7f\017\uff7f\020\uff7f" +
    "\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f\030\uff7f\032" +
    "\uff7f\033\uff7f\034\uff7f\036\uff7f\037\uff7f\040\uff7f\043\uff7f" +
    "\067\uff7f\001\002\000\004\002\u012a\001\002\000\012\003" +
    "\uff7c\011\uff7c\027\200\067\uff7c\001\002\000\026\002\ufff9" +
    "\004\011\005\021\006\025\051\007\062\016\063\017\064" +
    "\010\066\023\067\013\001\002\000\010\003\170\011\100" +
    "\067\171\001\002\000\004\067\163\001\002\000\004\004" +
    "\033\001\002\000\026\002\ufff9\004\011\005\021\006\025" +
    "\051\007\062\016\063\017\064\010\066\023\067\013\001" +
    "\002\000\050\003\uff7e\011\uff7e\016\uff7e\017\uff7e\020\uff7e" +
    "\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e\030\uff7e\032" +
    "\uff7e\033\uff7e\034\uff7e\036\uff7e\037\uff7e\040\uff7e\043\uff7e" +
    "\067\uff7e\001\002\000\026\002\ufff9\004\011\005\021\006" +
    "\025\051\007\062\016\063\017\064\010\066\023\067\013" +
    "\001\002\000\004\073\027\001\002\000\026\002\ufff9\004" +
    "\011\005\021\006\025\051\007\062\016\063\017\064\010" +
    "\066\023\067\013\001\002\000\050\003\uff7d\011\uff7d\016" +
    "\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d" +
    "\025\uff7d\030\uff7d\032\uff7d\033\uff7d\034\uff7d\036\uff7d\037" +
    "\uff7d\040\uff7d\043\uff7d\067\uff7d\001\002\000\004\002\ufffd" +
    "\001\002\000\004\040\030\001\002\000\026\002\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\051\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\066\uffe9\067\uffe9\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\ufffa\001\002\000\004\067\034\001\002\000\004" +
    "\036\035\001\002\000\034\011\067\014\071\015\062\026" +
    "\037\027\056\033\060\041\065\061\036\065\061\067\042" +
    "\070\070\071\043\072\057\001\002\000\004\027\157\001" +
    "\002\000\032\011\067\014\071\015\062\026\037\027\056" +
    "\033\060\041\065\061\036\067\042\070\070\071\043\072" +
    "\057\001\002\000\054\003\uff97\007\uff97\010\uff97\011\uff97" +
    "\012\uff97\013\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022" +
    "\uff97\023\uff97\024\uff97\025\uff97\030\uff97\032\uff97\034\uff97" +
    "\036\uff97\037\uff97\040\uff97\043\uff97\001\002\000\054\003" +
    "\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\016\uff99" +
    "\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025" +
    "\uff99\030\uff99\032\uff99\034\uff99\036\uff99\037\uff99\040\uff99" +
    "\043\uff99\001\002\000\062\003\uff76\007\uff76\010\uff76\011" +
    "\uff76\012\uff76\013\uff76\016\uff76\017\uff76\020\uff76\021\uff76" +
    "\022\uff76\023\uff76\024\uff76\025\uff76\027\147\030\uff76\031" +
    "\uff76\032\uff76\034\uff76\036\uff76\037\uff76\040\uff76\042\uff76" +
    "\043\uff76\001\002\000\054\003\uff95\007\uff95\010\uff95\011" +
    "\uff95\012\uff95\013\uff95\016\uff95\017\uff95\020\uff95\021\uff95" +
    "\022\uff95\023\uff95\024\uff95\025\uff95\030\uff95\032\uff95\034" +
    "\uff95\036\uff95\037\uff95\040\uff95\043\uff95\001\002\000\054" +
    "\003\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\016" +
    "\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\030\uff9b\032\uff9b\034\uff9b\036\uff9b\037\uff9b\040" +
    "\uff9b\043\uff9b\001\002\000\042\003\uff9f\016\uff9f\017\uff9f" +
    "\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\030" +
    "\uff9f\032\uff9f\034\uff9f\036\uff9f\037\uff9f\040\uff9f\043\uff9f" +
    "\001\002\000\054\003\uff9d\007\uff9d\010\uff9d\011\130\012" +
    "\131\013\127\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\025\uff9d\030\uff9d\032\uff9d\034\uff9d\036" +
    "\uff9d\037\uff9d\040\uff9d\043\uff9d\001\002\000\046\003\uffa0" +
    "\007\123\010\124\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022" +
    "\uffa0\023\uffa0\024\uffa0\025\uffa0\030\uffa0\032\uffa0\034\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\043\uffa0\001\002\000\042\003" +
    "\uffa2\016\115\017\117\020\120\021\116\022\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\030\uffa2\032\uffa2\034\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\043\uffa2\001\002\000\032\003\uffa4\022\110" +
    "\023\112\024\uffa4\025\uffa4\030\uffa4\032\uffa4\034\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\043\uffa4\001\002\000\026\003\uffa6" +
    "\024\106\025\uffa6\030\uffa6\032\uffa6\034\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\043\uffa6\001\002\000\010\003\146\025\104" +
    "\040\145\001\002\000\060\003\uff77\007\uff77\010\uff77\011" +
    "\uff77\012\uff77\013\uff77\016\uff77\017\uff77\020\uff77\021\uff77" +
    "\022\uff77\023\uff77\024\uff77\025\uff77\030\uff77\031\140\032" +
    "\uff77\034\uff77\036\uff77\037\uff77\040\uff77\042\141\043\uff77" +
    "\001\002\000\054\003\uff93\007\uff93\010\uff93\011\uff93\012" +
    "\uff93\013\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93" +
    "\023\uff93\024\uff93\025\uff93\030\uff93\032\uff93\034\uff93\036" +
    "\uff93\037\uff93\040\uff93\043\uff93\001\002\000\034\011\067" +
    "\014\071\015\062\026\037\027\056\033\060\041\065\061" +
    "\036\065\061\067\042\070\070\071\043\072\057\001\002" +
    "\000\054\003\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013" +
    "\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94" +
    "\024\uff94\025\uff94\030\uff94\032\uff94\034\uff94\036\uff94\037" +
    "\uff94\040\uff94\043\uff94\001\002\000\034\011\067\014\071" +
    "\015\062\026\037\027\056\033\060\041\065\061\036\065" +
    "\061\067\042\070\070\071\043\072\057\001\002\000\014" +
    "\004\011\005\021\006\025\064\010\067\076\001\002\000" +
    "\030\011\uff81\014\uff81\015\uff81\027\uff81\033\uff81\041\uff81" +
    "\061\uff81\067\uff81\070\uff81\071\uff81\072\uff81\001\002\000" +
    "\054\003\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91" +
    "\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024" +
    "\uff91\025\uff91\030\uff91\032\uff91\034\uff91\036\uff91\037\uff91" +
    "\040\uff91\043\uff91\001\002\000\030\011\067\014\071\015" +
    "\062\027\056\033\060\041\065\061\036\067\042\070\070" +
    "\071\043\072\057\001\002\000\012\011\067\027\056\041" +
    "\065\067\072\001\002\000\054\003\uff92\007\uff92\010\uff92" +
    "\011\uff92\012\uff92\013\uff92\016\uff92\017\uff92\020\uff92\021" +
    "\uff92\022\uff92\023\uff92\024\uff92\025\uff92\030\uff92\032\uff92" +
    "\034\uff92\036\uff92\037\uff92\040\uff92\043\uff92\001\002\000" +
    "\012\011\067\027\056\041\065\067\072\001\002\000\054" +
    "\003\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\016" +
    "\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96" +
    "\025\uff96\030\uff96\032\uff96\034\uff96\036\uff96\037\uff96\040" +
    "\uff96\043\uff96\001\002\000\030\011\uff82\014\uff82\015\uff82" +
    "\027\uff82\033\uff82\041\uff82\061\uff82\067\uff82\070\uff82\071" +
    "\uff82\072\uff82\001\002\000\060\003\uff76\007\uff76\010\uff76" +
    "\011\uff76\012\uff76\013\uff76\016\uff76\017\uff76\020\uff76\021" +
    "\uff76\022\uff76\023\uff76\024\uff76\025\uff76\030\uff76\031\uff76" +
    "\032\uff76\034\uff76\036\uff76\037\uff76\040\uff76\042\uff76\043" +
    "\uff76\001\002\000\054\003\uff79\007\uff79\010\uff79\011\uff79" +
    "\012\uff79\013\uff79\016\uff79\017\uff79\020\uff79\021\uff79\022" +
    "\uff79\023\uff79\024\uff79\025\uff79\030\uff79\032\uff79\034\uff79" +
    "\036\uff79\037\uff79\040\uff79\043\uff79\001\002\000\054\003" +
    "\uff78\007\uff78\010\uff78\011\uff78\012\uff78\013\uff78\016\uff78" +
    "\017\uff78\020\uff78\021\uff78\022\uff78\023\uff78\024\uff78\025" +
    "\uff78\030\uff78\032\uff78\034\uff78\036\uff78\037\uff78\040\uff78" +
    "\043\uff78\001\002\000\054\003\uff98\007\uff98\010\uff98\011" +
    "\uff98\012\uff98\013\uff98\016\uff98\017\uff98\020\uff98\021\uff98" +
    "\022\uff98\023\uff98\024\uff98\025\uff98\030\uff98\032\uff98\034" +
    "\uff98\036\uff98\037\uff98\040\uff98\043\uff98\001\002\000\050" +
    "\003\uff7c\011\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022" +
    "\uff7c\023\uff7c\024\uff7c\025\uff7c\030\uff7c\032\uff7c\033\uff7c" +
    "\034\uff7c\036\uff7c\037\uff7c\040\uff7c\043\uff7c\067\uff7c\001" +
    "\002\000\044\003\uff80\011\100\016\uff80\017\uff80\020\uff80" +
    "\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80\030\uff80\032" +
    "\uff80\034\uff80\036\uff80\037\uff80\040\uff80\043\uff80\001\002" +
    "\000\050\003\uff7a\011\uff7a\016\uff7a\017\uff7a\020\uff7a\021" +
    "\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\030\uff7a\032\uff7a" +
    "\033\uff7a\034\uff7a\036\uff7a\037\uff7a\040\uff7a\043\uff7a\067" +
    "\uff7a\001\002\000\010\025\104\034\uff8e\037\102\001\002" +
    "\000\034\011\067\014\071\015\062\026\037\027\056\033" +
    "\060\041\065\061\036\065\061\067\042\070\070\071\043" +
    "\072\057\001\002\000\004\034\133\001\002\000\034\011" +
    "\067\014\071\015\062\026\037\027\056\033\060\041\065" +
    "\061\036\065\061\067\042\070\070\071\043\072\057\001" +
    "\002\000\026\003\uffa7\024\106\025\uffa7\030\uffa7\032\uffa7" +
    "\034\uffa7\036\uffa7\037\uffa7\040\uffa7\043\uffa7\001\002\000" +
    "\034\011\067\014\071\015\062\026\037\027\056\033\060" +
    "\041\065\061\036\065\061\067\042\070\070\071\043\072" +
    "\057\001\002\000\032\003\uffa5\022\110\023\112\024\uffa5" +
    "\025\uffa5\030\uffa5\032\uffa5\034\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\043\uffa5\001\002\000\034\011\uff8d\014\uff8d\015\uff8d" +
    "\026\uff8d\027\uff8d\033\uff8d\041\uff8d\061\uff8d\065\uff8d\067" +
    "\uff8d\070\uff8d\071\uff8d\072\uff8d\001\002\000\034\011\067" +
    "\014\071\015\062\026\037\027\056\033\060\041\065\061" +
    "\036\065\061\067\042\070\070\071\043\072\057\001\002" +
    "\000\034\011\uff8c\014\uff8c\015\uff8c\026\uff8c\027\uff8c\033" +
    "\uff8c\041\uff8c\061\uff8c\065\uff8c\067\uff8c\070\uff8c\071\uff8c" +
    "\072\uff8c\001\002\000\042\003\uffa3\016\115\017\117\020" +
    "\120\021\116\022\uffa3\023\uffa3\024\uffa3\025\uffa3\030\uffa3" +
    "\032\uffa3\034\uffa3\036\uffa3\037\uffa3\040\uffa3\043\uffa3\001" +
    "\002\000\032\011\067\014\071\015\062\026\037\027\056" +
    "\033\060\041\065\061\036\067\042\070\070\071\043\072" +
    "\057\001\002\000\032\011\uff8a\014\uff8a\015\uff8a\026\uff8a" +
    "\027\uff8a\033\uff8a\041\uff8a\061\uff8a\067\uff8a\070\uff8a\071" +
    "\uff8a\072\uff8a\001\002\000\032\011\uff89\014\uff89\015\uff89" +
    "\026\uff89\027\uff89\033\uff89\041\uff89\061\uff89\067\uff89\070" +
    "\uff89\071\uff89\072\uff89\001\002\000\032\011\uff8b\014\uff8b" +
    "\015\uff8b\026\uff8b\027\uff8b\033\uff8b\041\uff8b\061\uff8b\067" +
    "\uff8b\070\uff8b\071\uff8b\072\uff8b\001\002\000\032\011\uff88" +
    "\014\uff88\015\uff88\026\uff88\027\uff88\033\uff88\041\uff88\061" +
    "\uff88\067\uff88\070\uff88\071\uff88\072\uff88\001\002\000\046" +
    "\003\uffa1\007\123\010\124\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\030\uffa1\032\uffa1" +
    "\034\uffa1\036\uffa1\037\uffa1\040\uffa1\043\uffa1\001\002\000" +
    "\032\011\067\014\071\015\062\026\037\027\056\033\060" +
    "\041\065\061\036\067\042\070\070\071\043\072\057\001" +
    "\002\000\034\011\uff87\014\uff87\015\uff87\026\uff87\027\uff87" +
    "\033\uff87\036\uff87\041\uff87\061\uff87\067\uff87\070\uff87\071" +
    "\uff87\072\uff87\001\002\000\034\011\uff86\014\uff86\015\uff86" +
    "\026\uff86\027\uff86\033\uff86\036\uff86\041\uff86\061\uff86\067" +
    "\uff86\070\uff86\071\uff86\072\uff86\001\002\000\054\003\uff9e" +
    "\007\uff9e\010\uff9e\011\130\012\131\013\127\016\uff9e\017" +
    "\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e" +
    "\030\uff9e\032\uff9e\034\uff9e\036\uff9e\037\uff9e\040\uff9e\043" +
    "\uff9e\001\002\000\032\011\067\014\071\015\062\026\037" +
    "\027\056\033\060\041\065\061\036\067\042\070\070\071" +
    "\043\072\057\001\002\000\032\011\uff83\014\uff83\015\uff83" +
    "\026\uff83\027\uff83\033\uff83\041\uff83\061\uff83\067\uff83\070" +
    "\uff83\071\uff83\072\uff83\001\002\000\032\011\uff85\014\uff85" +
    "\015\uff85\026\uff85\027\uff85\033\uff85\041\uff85\061\uff85\067" +
    "\uff85\070\uff85\071\uff85\072\uff85\001\002\000\032\011\uff84" +
    "\014\uff84\015\uff84\026\uff84\027\uff84\033\uff84\041\uff84\061" +
    "\uff84\067\uff84\070\uff84\071\uff84\072\uff84\001\002\000\054" +
    "\003\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\016" +
    "\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c" +
    "\025\uff9c\030\uff9c\032\uff9c\034\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\043\uff9c\001\002\000\054\003\uff90\007\uff90\010\uff90" +
    "\011\uff90\012\uff90\013\uff90\016\uff90\017\uff90\020\uff90\021" +
    "\uff90\022\uff90\023\uff90\024\uff90\025\uff90\030\uff90\032\uff90" +
    "\034\uff90\036\uff90\037\uff90\040\uff90\043\uff90\001\002\000" +
    "\010\025\104\034\uff8e\037\102\001\002\000\004\034\uff8f" +
    "\001\002\000\006\025\104\030\137\001\002\000\060\003" +
    "\uff73\007\uff73\010\uff73\011\uff73\012\uff73\013\uff73\016\uff73" +
    "\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024\uff73\025" +
    "\uff73\030\uff73\031\uff73\032\uff73\034\uff73\036\uff73\037\uff73" +
    "\040\uff73\042\uff73\043\uff73\001\002\000\034\011\067\014" +
    "\071\015\062\026\037\027\056\033\060\041\065\061\036" +
    "\065\061\067\042\070\070\071\043\072\057\001\002\000" +
    "\004\067\142\001\002\000\060\003\uff74\007\uff74\010\uff74" +
    "\011\uff74\012\uff74\013\uff74\016\uff74\017\uff74\020\uff74\021" +
    "\uff74\022\uff74\023\uff74\024\uff74\025\uff74\030\uff74\031\uff74" +
    "\032\uff74\034\uff74\036\uff74\037\uff74\040\uff74\042\uff74\043" +
    "\uff74\001\002\000\006\025\104\032\144\001\002\000\060" +
    "\003\uff75\007\uff75\010\uff75\011\uff75\012\uff75\013\uff75\016" +
    "\uff75\017\uff75\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75" +
    "\025\uff75\030\uff75\031\uff75\032\uff75\034\uff75\036\uff75\037" +
    "\uff75\040\uff75\042\uff75\043\uff75\001\002\000\026\002\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\051\ufff1\062\ufff1\063\ufff1\064" +
    "\ufff1\066\ufff1\067\ufff1\001\002\000\026\002\ufff0\004\ufff0" +
    "\005\ufff0\006\ufff0\051\ufff0\062\ufff0\063\ufff0\064\ufff0\066" +
    "\ufff0\067\ufff0\001\002\000\036\011\067\014\071\015\062" +
    "\026\037\027\056\030\uffc8\033\060\041\065\061\036\065" +
    "\061\067\042\070\070\071\043\072\057\001\002\000\004" +
    "\030\155\001\002\000\010\025\104\030\uffc6\037\153\001" +
    "\002\000\004\030\uffc9\001\002\000\034\011\067\014\071" +
    "\015\062\026\037\027\056\033\060\041\065\061\036\065" +
    "\061\067\042\070\070\071\043\072\057\001\002\000\004" +
    "\030\uffc7\001\002\000\054\003\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\016\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\030\uffca\032\uffca\034" +
    "\uffca\036\uffca\037\uffca\040\uffca\043\uffca\001\002\000\054" +
    "\003\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\016" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\030\uff9a\032\uff9a\034\uff9a\036\uff9a\037\uff9a\040" +
    "\uff9a\043\uff9a\001\002\000\006\003\161\030\160\001\002" +
    "\000\054\003\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\030\uffd1\032\uffd1\034\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\043\uffd1\001\002\000\004\030\162\001\002" +
    "\000\054\003\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\030\uffd0\032\uffd0\034\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\043\uffd0\001\002\000\004\036\164\001\002" +
    "\000\014\004\011\005\021\006\025\064\010\067\076\001" +
    "\002\000\010\003\167\011\100\040\166\001\002\000\026" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\051\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\066\uffeb\067\uffeb\001\002\000\026\002\uffea" +
    "\004\uffea\005\uffea\006\uffea\051\uffea\062\uffea\063\uffea\064" +
    "\uffea\066\uffea\067\uffea\001\002\000\104\002\ufff5\003\ufff5" +
    "\004\ufff5\005\ufff5\006\ufff5\011\ufff5\014\ufff5\015\ufff5\026" +
    "\ufff5\027\ufff5\033\ufff5\034\ufff5\041\ufff5\044\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\051\ufff5\052\ufff5\053\ufff5\055\ufff5\057" +
    "\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5" +
    "\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\001\002\000" +
    "\010\003\173\036\174\040\172\001\002\000\104\002\ufff8" +
    "\003\ufff8\004\ufff8\005\ufff8\006\ufff8\011\ufff8\014\ufff8\015" +
    "\ufff8\026\ufff8\027\ufff8\033\ufff8\034\ufff8\041\ufff8\044\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\051\ufff8\052\ufff8\053\ufff8\055" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\001" +
    "\002\000\104\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\011\ufff6\014\ufff6\015\ufff6\026\ufff6\027\ufff6\033\ufff6\034" +
    "\ufff6\041\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\051\ufff6" +
    "\052\ufff6\053\ufff6\055\ufff6\057\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6" +
    "\071\ufff6\072\ufff6\001\002\000\034\011\067\014\071\015" +
    "\062\026\037\027\056\033\060\041\065\061\036\065\061" +
    "\067\042\070\070\071\043\072\057\001\002\000\006\025" +
    "\104\040\176\001\002\000\104\002\ufff7\003\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\011\ufff7\014\ufff7\015\ufff7\026\ufff7\027" +
    "\ufff7\033\ufff7\034\ufff7\041\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\051\ufff7\052\ufff7\053\ufff7\055\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7" +
    "\067\ufff7\070\ufff7\071\ufff7\072\ufff7\001\002\000\004\002" +
    "\ufffe\001\002\000\006\030\uffe4\067\203\001\002\000\004" +
    "\030\uffe5\001\002\000\004\030\215\001\002\000\006\003" +
    "\207\043\210\001\002\000\006\030\uffe2\037\205\001\002" +
    "\000\004\067\203\001\002\000\004\030\uffe3\001\002\000" +
    "\006\030\uffde\037\uffde\001\002\000\020\003\212\004\011" +
    "\005\021\006\025\041\211\064\010\067\076\001\002\000" +
    "\014\004\011\005\021\006\025\064\010\067\076\001\002" +
    "\000\006\030\uffdf\037\uffdf\001\002\000\010\011\100\030" +
    "\uffe1\037\uffe1\001\002\000\010\011\100\030\uffe0\037\uffe0" +
    "\001\002\000\006\003\217\035\216\001\002\000\016\003" +
    "\u0126\004\011\005\021\006\025\064\010\067\076\001\002" +
    "\000\014\004\011\005\021\006\025\064\010\067\076\001" +
    "\002\000\006\011\100\033\222\001\002\000\026\002\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\051\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\066\uffe7\067\uffe7\001\002\000\050\003\237\004\011" +
    "\005\021\006\025\011\067\027\056\033\222\034\uffdb\041" +
    "\065\044\223\045\244\046\246\047\231\052\230\053\234" +
    "\057\226\060\225\064\010\067\227\001\002\000\004\027" +
    "\u011f\001\002\000\052\003\uffc5\004\uffc5\005\uffc5\006\uffc5" +
    "\011\uffc5\027\uffc5\033\uffc5\034\uffc5\041\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\052\uffc5\053\uffc5\055\uffc5\057\uffc5" +
    "\060\uffc5\064\uffc5\067\uffc5\001\002\000\004\027\u0117\001" +
    "\002\000\036\011\067\014\071\015\062\026\037\027\056" +
    "\033\060\040\u0113\041\065\061\036\065\061\067\042\070" +
    "\070\071\043\072\057\001\002\000\024\003\uff7c\007\uff76" +
    "\010\uff76\011\uff7c\027\147\031\uff76\036\uff76\042\uff76\067" +
    "\uff7c\001\002\000\004\027\370\001\002\000\004\027\357" +
    "\001\002\000\052\003\237\004\011\005\021\006\025\011" +
    "\067\027\056\033\222\034\uffdb\041\065\044\223\045\244" +
    "\046\246\047\231\052\230\053\234\055\uffdb\057\226\060" +
    "\225\064\010\067\227\001\002\000\004\034\355\001\002" +
    "\000\004\027\317\001\002\000\052\003\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\011\uffd8\027\uffd8\033\uffd8\034\uffd8\041\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\052\uffd8\053\uffd8\055" +
    "\uffd8\057\uffd8\060\uffd8\064\uffd8\067\uffd8\001\002\000\010" +
    "\007\123\010\124\036\310\001\002\000\004\040\306\001" +
    "\002\000\052\003\uffd6\004\uffd6\005\uffd6\006\uffd6\011\uffd6" +
    "\027\uffd6\033\uffd6\034\uffd6\041\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\052\uffd6\053\uffd6\055\uffd6\057\uffd6\060\uffd6" +
    "\064\uffd6\067\uffd6\001\002\000\052\003\uffda\004\uffda\005" +
    "\uffda\006\uffda\011\uffda\027\uffda\033\uffda\034\uffda\041\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\052\uffda\053\uffda\055" +
    "\uffda\057\uffda\060\uffda\064\uffda\067\uffda\001\002\000\052" +
    "\003\uffc3\004\uffc3\005\uffc3\006\uffc3\011\uffc3\027\uffc3\033" +
    "\uffc3\034\uffc3\041\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\052\uffc3\053\uffc3\055\uffc3\057\uffc3\060\uffc3\064\uffc3\067" +
    "\uffc3\001\002\000\052\003\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\011\uffd7\027\uffd7\033\uffd7\034\uffd7\041\uffd7\044\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\052\uffd7\053\uffd7\055\uffd7\057\uffd7" +
    "\060\uffd7\064\uffd7\067\uffd7\001\002\000\004\027\265\001" +
    "\002\000\006\003\264\040\263\001\002\000\004\027\254" +
    "\001\002\000\052\003\uffd9\004\uffd9\005\uffd9\006\uffd9\011" +
    "\uffd9\027\uffd9\033\uffd9\034\uffd9\041\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\052\uffd9\053\uffd9\055\uffd9\057\uffd9\060" +
    "\uffd9\064\uffd9\067\uffd9\001\002\000\052\003\237\004\011" +
    "\005\021\006\025\011\067\027\056\033\222\034\uffdb\041" +
    "\065\044\223\045\244\046\246\047\231\052\230\053\234" +
    "\055\uffdb\057\226\060\225\064\010\067\227\001\002\000" +
    "\052\003\uffc2\004\uffc2\005\uffc2\006\uffc2\011\uffc2\027\uffc2" +
    "\033\uffc2\034\uffc2\041\uffc2\044\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\052\uffc2\053\uffc2\055\uffc2\057\uffc2\060\uffc2\064\uffc2" +
    "\067\uffc2\001\002\000\052\003\uffc4\004\uffc4\005\uffc4\006" +
    "\uffc4\011\uffc4\027\uffc4\033\uffc4\034\uffc4\041\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\052\uffc4\053\uffc4\055\uffc4\057" +
    "\uffc4\060\uffc4\064\uffc4\067\uffc4\001\002\000\006\034\uffdc" +
    "\055\uffdc\001\002\000\036\003\256\011\067\014\071\015" +
    "\062\026\037\027\056\033\060\041\065\061\036\065\061" +
    "\067\042\070\070\071\043\072\057\001\002\000\006\025" +
    "\104\030\261\001\002\000\004\030\257\001\002\000\004" +
    "\033\222\001\002\000\052\003\uffb7\004\uffb7\005\uffb7\006" +
    "\uffb7\011\uffb7\027\uffb7\033\uffb7\034\uffb7\041\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\052\uffb7\053\uffb7\055\uffb7\057" +
    "\uffb7\060\uffb7\064\uffb7\067\uffb7\001\002\000\004\033\222" +
    "\001\002\000\052\003\uffba\004\uffba\005\uffba\006\uffba\011" +
    "\uffba\027\uffba\033\uffba\034\uffba\041\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\052\uffba\053\uffba\055\uffba\057\uffba\060" +
    "\uffba\064\uffba\067\uffba\001\002\000\052\003\uffcc\004\uffcc" +
    "\005\uffcc\006\uffcc\011\uffcc\027\uffcc\033\uffcc\034\uffcc\041" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\052\uffcc\053\uffcc" +
    "\055\uffcc\057\uffcc\060\uffcc\064\uffcc\067\uffcc\001\002\000" +
    "\052\003\uffcb\004\uffcb\005\uffcb\006\uffcb\011\uffcb\027\uffcb" +
    "\033\uffcb\034\uffcb\041\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\052\uffcb\053\uffcb\055\uffcb\057\uffcb\060\uffcb\064\uffcb" +
    "\067\uffcb\001\002\000\016\003\266\004\011\005\021\006" +
    "\025\064\010\067\076\001\002\000\004\030\304\001\002" +
    "\000\034\011\067\014\071\015\062\026\037\027\056\033" +
    "\060\041\065\061\036\065\061\067\042\070\070\071\043" +
    "\072\057\001\002\000\006\025\104\040\271\001\002\000" +
    "\012\011\067\027\056\041\065\067\072\001\002\000\010" +
    "\007\123\010\124\036\274\001\002\000\004\036\300\001" +
    "\002\000\034\011\067\014\071\015\062\026\037\027\056" +
    "\033\060\041\065\061\036\065\061\067\042\070\070\071" +
    "\043\072\057\001\002\000\006\025\104\030\276\001\002" +
    "\000\004\033\222\001\002\000\052\003\uffbc\004\uffbc\005" +
    "\uffbc\006\uffbc\011\uffbc\027\uffbc\033\uffbc\034\uffbc\041\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\052\uffbc\053\uffbc\055" +
    "\uffbc\057\uffbc\060\uffbc\064\uffbc\067\uffbc\001\002\000\034" +
    "\011\067\014\071\015\062\026\037\027\056\033\060\041" +
    "\065\061\036\065\061\067\042\070\070\071\043\072\057" +
    "\001\002\000\006\025\104\030\302\001\002\000\004\033" +
    "\222\001\002\000\052\003\uffbb\004\uffbb\005\uffbb\006\uffbb" +
    "\011\uffbb\027\uffbb\033\uffbb\034\uffbb\041\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\052\uffbb\053\uffbb\055\uffbb\057\uffbb" +
    "\060\uffbb\064\uffbb\067\uffbb\001\002\000\004\033\222\001" +
    "\002\000\052\003\uffb8\004\uffb8\005\uffb8\006\uffb8\011\uffb8" +
    "\027\uffb8\033\uffb8\034\uffb8\041\uffb8\044\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\052\uffb8\053\uffb8\055\uffb8\057\uffb8\060\uffb8" +
    "\064\uffb8\067\uffb8\001\002\000\052\003\uffd5\004\uffd5\005" +
    "\uffd5\006\uffd5\011\uffd5\027\uffd5\033\uffd5\034\uffd5\041\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\052\uffd5\053\uffd5\055" +
    "\uffd5\057\uffd5\060\uffd5\064\uffd5\067\uffd5\001\002\000\004" +
    "\036\314\001\002\000\034\011\067\014\071\015\062\026" +
    "\037\027\056\033\060\041\065\061\036\065\061\067\042" +
    "\070\070\071\043\072\057\001\002\000\010\003\313\025" +
    "\104\040\312\001\002\000\052\003\ufff4\004\ufff4\005\ufff4" +
    "\006\ufff4\011\ufff4\027\ufff4\033\ufff4\034\ufff4\041\ufff4\044" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\052\ufff4\053\ufff4\055\ufff4" +
    "\057\ufff4\060\ufff4\064\ufff4\067\ufff4\001\002\000\052\003" +
    "\ufff2\004\ufff2\005\ufff2\006\ufff2\011\ufff2\027\ufff2\033\ufff2" +
    "\034\ufff2\041\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\052" +
    "\ufff2\053\ufff2\055\ufff2\057\ufff2\060\ufff2\064\ufff2\067\ufff2" +
    "\001\002\000\034\011\067\014\071\015\062\026\037\027" +
    "\056\033\060\041\065\061\036\065\061\067\042\070\070" +
    "\071\043\072\057\001\002\000\006\025\104\040\316\001" +
    "\002\000\052\003\ufff3\004\ufff3\005\ufff3\006\ufff3\011\ufff3" +
    "\027\ufff3\033\ufff3\034\ufff3\041\ufff3\044\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\052\ufff3\053\ufff3\055\ufff3\057\ufff3\060\ufff3" +
    "\064\ufff3\067\ufff3\001\002\000\014\003\320\011\067\027" +
    "\056\041\065\067\072\001\002\000\004\030\347\001\002" +
    "\000\004\030\322\001\002\000\004\033\323\001\002\000" +
    "\010\034\uffaa\054\325\056\uffaa\001\002\000\006\034\337" +
    "\056\335\001\002\000\034\011\067\014\071\015\062\026" +
    "\037\027\056\033\060\041\065\061\036\065\061\067\042" +
    "\070\070\071\043\072\057\001\002\000\006\025\104\036" +
    "\327\001\002\000\034\011\067\014\071\015\062\026\037" +
    "\027\056\033\060\041\065\061\036\065\061\067\042\070" +
    "\070\071\043\072\057\001\002\000\006\025\104\040\331" +
    "\001\002\000\004\055\332\001\002\000\004\040\333\001" +
    "\002\000\010\034\uffaa\054\325\056\uffaa\001\002\000\006" +
    "\034\uffab\056\uffab\001\002\000\004\036\341\001\002\000" +
    "\004\034\340\001\002\000\052\003\uffb3\004\uffb3\005\uffb3" +
    "\006\uffb3\011\uffb3\027\uffb3\033\uffb3\034\uffb3\041\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\052\uffb3\053\uffb3\055\uffb3" +
    "\057\uffb3\060\uffb3\064\uffb3\067\uffb3\001\002\000\052\003" +
    "\uffb4\004\uffb4\005\uffb4\006\uffb4\011\uffb4\027\uffb4\033\uffb4" +
    "\034\uffb4\041\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\052" +
    "\uffb4\053\uffb4\055\uffb4\057\uffb4\060\uffb4\064\uffb4\067\uffb4" +
    "\001\002\000\034\011\067\014\071\015\062\026\037\027" +
    "\056\033\060\041\065\061\036\065\061\067\042\070\070" +
    "\071\043\072\057\001\002\000\010\003\344\025\104\040" +
    "\343\001\002\000\004\055\345\001\002\000\004\034\uffa8" +
    "\001\002\000\004\040\346\001\002\000\004\034\uffa9\001" +
    "\002\000\004\033\350\001\002\000\010\034\uffaa\054\325" +
    "\056\uffaa\001\002\000\006\034\353\056\335\001\002\000" +
    "\004\034\354\001\002\000\052\003\uffaf\004\uffaf\005\uffaf" +
    "\006\uffaf\011\uffaf\027\uffaf\033\uffaf\034\uffaf\041\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\052\uffaf\053\uffaf\055\uffaf" +
    "\057\uffaf\060\uffaf\064\uffaf\067\uffaf\001\002\000\052\003" +
    "\uffb0\004\uffb0\005\uffb0\006\uffb0\011\uffb0\027\uffb0\033\uffb0" +
    "\034\uffb0\041\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\052" +
    "\uffb0\053\uffb0\055\uffb0\057\uffb0\060\uffb0\064\uffb0\067\uffb0" +
    "\001\002\000\066\002\uffc1\003\uffc1\004\uffc1\005\uffc1\006" +
    "\uffc1\011\uffc1\027\uffc1\033\uffc1\034\uffc1\041\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\055\uffc1\057\uffc1\060\uffc1\062\uffc1\063\uffc1\064\uffc1" +
    "\066\uffc1\067\uffc1\001\002\000\006\034\uffdd\055\uffdd\001" +
    "\002\000\036\003\361\011\067\014\071\015\062\026\037" +
    "\027\056\033\060\041\065\061\036\065\061\067\042\070" +
    "\070\071\043\072\057\001\002\000\006\025\104\030\364" +
    "\001\002\000\004\030\362\001\002\000\004\033\222\001" +
    "\002\000\052\003\uffbe\004\uffbe\005\uffbe\006\uffbe\011\uffbe" +
    "\027\uffbe\033\uffbe\034\uffbe\041\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\052\uffbe\053\uffbe\055\uffbe\057\uffbe\060\uffbe" +
    "\064\uffbe\067\uffbe\001\002\000\004\033\222\001\002\000" +
    "\054\003\uffc0\004\uffc0\005\uffc0\006\uffc0\011\uffc0\027\uffc0" +
    "\033\uffc0\034\uffc0\041\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\050\366\052\uffc0\053\uffc0\055\uffc0\057\uffc0\060\uffc0" +
    "\064\uffc0\067\uffc0\001\002\000\004\033\222\001\002\000" +
    "\052\003\uffbf\004\uffbf\005\uffbf\006\uffbf\011\uffbf\027\uffbf" +
    "\033\uffbf\034\uffbf\041\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\052\uffbf\053\uffbf\055\uffbf\057\uffbf\060\uffbf\064\uffbf" +
    "\067\uffbf\001\002\000\036\003\372\011\067\014\071\015" +
    "\062\026\037\027\056\033\060\041\065\061\036\065\061" +
    "\067\042\070\070\071\043\072\057\001\002\000\006\025" +
    "\104\030\u010d\001\002\000\004\030\373\001\002\000\004" +
    "\033\374\001\002\000\010\034\uffad\054\376\056\uffad\001" +
    "\002\000\006\034\u0107\056\u0105\001\002\000\034\011\067" +
    "\014\071\015\062\026\037\027\056\033\060\041\065\061" +
    "\036\065\061\067\042\070\070\071\043\072\057\001\002" +
    "\000\006\025\104\043\u0100\001\002\000\050\003\237\004" +
    "\011\005\021\006\025\011\067\027\056\033\222\041\065" +
    "\044\223\045\244\046\246\047\231\052\230\053\234\055" +
    "\uffdb\057\226\060\225\064\010\067\227\001\002\000\004" +
    "\055\u0102\001\002\000\004\040\u0103\001\002\000\010\034" +
    "\uffad\054\376\056\uffad\001\002\000\006\034\uffae\056\uffae" +
    "\001\002\000\004\043\u0109\001\002\000\004\034\u0108\001" +
    "\002\000\052\003\uffb2\004\uffb2\005\uffb2\006\uffb2\011\uffb2" +
    "\027\uffb2\033\uffb2\034\uffb2\041\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\052\uffb2\053\uffb2\055\uffb2\057\uffb2\060\uffb2" +
    "\064\uffb2\067\uffb2\001\002\000\052\003\uffb1\004\uffb1\005" +
    "\uffb1\006\uffb1\011\uffb1\027\uffb1\033\uffb1\034\uffb1\041\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\047\uffb1\052\uffb1\053\uffb1\055" +
    "\uffb1\057\uffb1\060\uffb1\064\uffb1\067\uffb1\001\002\000\050" +
    "\003\237\004\011\005\021\006\025\011\067\027\056\033" +
    "\222\041\065\044\223\045\244\046\246\047\231\052\230" +
    "\053\234\055\uffdb\057\226\060\225\064\010\067\227\001" +
    "\002\000\004\055\u010b\001\002\000\004\040\u010c\001\002" +
    "\000\004\034\uffac\001\002\000\004\033\u010e\001\002\000" +
    "\010\034\uffad\054\376\056\uffad\001\002\000\006\034\u0111" +
    "\056\u0105\001\002\000\004\034\u0112\001\002\000\052\003" +
    "\uffb5\004\uffb5\005\uffb5\006\uffb5\011\uffb5\027\uffb5\033\uffb5" +
    "\034\uffb5\041\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\052" +
    "\uffb5\053\uffb5\055\uffb5\057\uffb5\060\uffb5\064\uffb5\067\uffb5" +
    "\001\002\000\052\003\uffb6\004\uffb6\005\uffb6\006\uffb6\011" +
    "\uffb6\027\uffb6\033\uffb6\034\uffb6\041\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\052\uffb6\053\uffb6\055\uffb6\057\uffb6\060" +
    "\uffb6\064\uffb6\067\uffb6\001\002\000\052\003\uffce\004\uffce" +
    "\005\uffce\006\uffce\011\uffce\027\uffce\033\uffce\034\uffce\041" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\052\uffce\053\uffce" +
    "\055\uffce\057\uffce\060\uffce\064\uffce\067\uffce\001\002\000" +
    "\010\003\u0116\025\104\040\u0115\001\002\000\052\003\uffcf" +
    "\004\uffcf\005\uffcf\006\uffcf\011\uffcf\027\uffcf\033\uffcf\034" +
    "\uffcf\041\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\052\uffcf" +
    "\053\uffcf\055\uffcf\057\uffcf\060\uffcf\064\uffcf\067\uffcf\001" +
    "\002\000\052\003\uffcd\004\uffcd\005\uffcd\006\uffcd\011\uffcd" +
    "\027\uffcd\033\uffcd\034\uffcd\041\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\052\uffcd\053\uffcd\055\uffcd\057\uffcd\060\uffcd" +
    "\064\uffcd\067\uffcd\001\002\000\036\003\u0119\011\067\014" +
    "\071\015\062\026\037\027\056\033\060\041\065\061\036" +
    "\065\061\067\042\070\070\071\043\072\057\001\002\000" +
    "\006\025\104\030\u011c\001\002\000\004\030\u011a\001\002" +
    "\000\004\040\u011b\001\002\000\052\003\uffd2\004\uffd2\005" +
    "\uffd2\006\uffd2\011\uffd2\027\uffd2\033\uffd2\034\uffd2\041\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\052\uffd2\053\uffd2\055" +
    "\uffd2\057\uffd2\060\uffd2\064\uffd2\067\uffd2\001\002\000\006" +
    "\003\u011e\040\u011d\001\002\000\052\003\uffd4\004\uffd4\005" +
    "\uffd4\006\uffd4\011\uffd4\027\uffd4\033\uffd4\034\uffd4\041\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\047\uffd4\052\uffd4\053\uffd4\055" +
    "\uffd4\057\uffd4\060\uffd4\064\uffd4\067\uffd4\001\002\000\052" +
    "\003\uffd3\004\uffd3\005\uffd3\006\uffd3\011\uffd3\027\uffd3\033" +
    "\uffd3\034\uffd3\041\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\052\uffd3\053\uffd3\055\uffd3\057\uffd3\060\uffd3\064\uffd3\067" +
    "\uffd3\001\002\000\036\003\u0121\011\067\014\071\015\062" +
    "\026\037\027\056\033\060\041\065\061\036\065\061\067" +
    "\042\070\070\071\043\072\057\001\002\000\006\025\104" +
    "\030\u0124\001\002\000\004\030\u0122\001\002\000\004\033" +
    "\222\001\002\000\052\003\uffb9\004\uffb9\005\uffb9\006\uffb9" +
    "\011\uffb9\027\uffb9\033\uffb9\034\uffb9\041\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\052\uffb9\053\uffb9\055\uffb9\057\uffb9" +
    "\060\uffb9\064\uffb9\067\uffb9\001\002\000\004\033\222\001" +
    "\002\000\052\003\uffbd\004\uffbd\005\uffbd\006\uffbd\011\uffbd" +
    "\027\uffbd\033\uffbd\034\uffbd\041\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\052\uffbd\053\uffbd\055\uffbd\057\uffbd\060\uffbd" +
    "\064\uffbd\067\uffbd\001\002\000\004\033\222\001\002\000" +
    "\006\011\100\033\222\001\002\000\026\002\uffe8\004\uffe8" +
    "\005\uffe8\006\uffe8\051\uffe8\062\uffe8\063\uffe8\064\uffe8\066" +
    "\uffe8\067\uffe8\001\002\000\026\002\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\051\uffe6\062\uffe6\063\uffe6\064\uffe6\066\uffe6\067" +
    "\uffe6\001\002\000\004\002\000\001\002\000\014\004\011" +
    "\005\021\006\025\064\010\067\076\001\002\000\006\011" +
    "\100\016\u012d\001\002\000\004\031\u012e\001\002\000\004" +
    "\070\u012f\001\002\000\004\032\u0130\001\002\000\050\003" +
    "\uff7b\011\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b" +
    "\023\uff7b\024\uff7b\025\uff7b\030\uff7b\032\uff7b\033\uff7b\034" +
    "\uff7b\036\uff7b\037\uff7b\040\uff7b\043\uff7b\067\uff7b\001\002" +
    "\000\004\033\u0132\001\002\000\014\004\011\005\021\006" +
    "\025\064\010\067\076\001\002\000\016\004\011\005\021" +
    "\006\025\034\uffec\064\010\067\076\001\002\000\004\034" +
    "\u0135\001\002\000\006\003\u0137\040\u0136\001\002\000\026" +
    "\002\uffef\004\uffef\005\uffef\006\uffef\051\uffef\062\uffef\063" +
    "\uffef\064\uffef\066\uffef\067\uffef\001\002\000\026\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\051\uffee\062\uffee\063\uffee\064" +
    "\uffee\066\uffee\067\uffee\001\002\000\004\034\uffed\001\002" +
    "\000\004\002\ufffb\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\024\002\011\003\014\030\005\031\021\032" +
    "\013\033\023\034\004\035\017\036\003\001\001\000\022" +
    "\003\014\030\u0139\031\021\032\013\033\023\034\004\035" +
    "\017\036\003\001\001\000\022\003\014\030\u0138\031\021" +
    "\032\013\033\023\034\004\035\017\036\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\014\030\176\031\021\032\013\033\023\034\004\035\017" +
    "\036\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\014\030\031\031\021\032\013" +
    "\033\023\034\004\035\017\036\003\001\001\000\002\001" +
    "\001\000\022\003\014\030\030\031\021\032\013\033\023" +
    "\034\004\035\017\036\003\001\001\000\002\001\001\000" +
    "\022\003\014\030\025\031\021\032\013\033\023\034\004" +
    "\035\017\036\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\052\005\051\006\050\007\047\010\046\011\045" +
    "\012\043\013\040\014\037\015\054\016\053\017\044\020" +
    "\062\021\065\027\063\001\001\000\002\001\001\000\022" +
    "\012\155\013\040\014\037\015\054\016\053\020\062\021" +
    "\065\027\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\125\001\001\000\004\025\121" +
    "\001\001\000\004\024\113\001\001\000\004\023\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\135\005\051\006\050\007" +
    "\047\010\046\011\045\012\043\013\040\014\037\015\054" +
    "\016\053\017\044\020\062\021\065\027\063\001\001\000" +
    "\002\001\001\000\040\004\100\005\051\006\050\007\047" +
    "\010\046\011\045\012\043\013\040\014\037\015\054\016" +
    "\053\017\044\020\062\021\065\027\063\001\001\000\004" +
    "\003\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\013\074\014\037\015\054\016\053\020\062\021\065" +
    "\027\063\001\001\000\006\015\073\016\053\001\001\000" +
    "\002\001\001\000\006\015\072\016\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\102\001" +
    "\001\000\040\004\133\005\051\006\050\007\047\010\046" +
    "\011\045\012\043\013\040\014\037\015\054\016\053\017" +
    "\044\020\062\021\065\027\063\001\001\000\002\001\001" +
    "\000\036\005\104\006\050\007\047\010\046\011\045\012" +
    "\043\013\040\014\037\015\054\016\053\017\044\020\062" +
    "\021\065\027\063\001\001\000\002\001\001\000\034\006" +
    "\106\007\047\010\046\011\045\012\043\013\040\014\037" +
    "\015\054\016\053\017\044\020\062\021\065\027\063\001" +
    "\001\000\004\023\110\001\001\000\002\001\001\000\032" +
    "\007\112\010\046\011\045\012\043\013\040\014\037\015" +
    "\054\016\053\017\044\020\062\021\065\027\063\001\001" +
    "\000\002\001\001\000\004\024\113\001\001\000\026\010" +
    "\120\011\045\012\043\013\040\014\037\015\054\016\053" +
    "\020\062\021\065\027\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\121\001\001\000\024\011\124\012\043\013\040\014" +
    "\037\015\054\016\053\020\062\021\065\027\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\125\001" +
    "\001\000\022\012\131\013\040\014\037\015\054\016\053" +
    "\020\062\021\065\027\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\142\005\051" +
    "\006\050\007\047\010\046\011\045\012\043\013\040\014" +
    "\037\015\054\016\053\017\044\020\062\021\065\027\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\150\005\051\006\050\007\047\010\046\011" +
    "\045\012\043\013\040\014\037\015\054\016\053\017\044" +
    "\020\062\021\065\027\063\050\147\051\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\150\005\051\006\050\007\047\010\046\011\045\012" +
    "\043\013\040\014\037\015\054\016\053\017\044\020\062" +
    "\021\065\027\063\051\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\174" +
    "\005\051\006\050\007\047\010\046\011\045\012\043\013" +
    "\040\014\037\015\054\016\053\017\044\020\062\021\065" +
    "\027\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\041\203\042\200\043\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\203\042\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\212\001\001\000" +
    "\004\003\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u0126\001" +
    "\001\000\004\003\217\001\001\000\004\044\220\001\001" +
    "\000\002\001\001\000\042\003\014\015\235\016\053\021" +
    "\244\031\240\037\246\044\223\045\232\046\234\047\242" +
    "\052\237\053\251\054\241\055\250\056\247\057\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\u0113\005\051\006\050\007\047\010\046\011" +
    "\045\012\043\013\040\014\037\015\054\016\053\017\044" +
    "\020\062\021\065\027\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\014\015\235" +
    "\016\053\021\244\031\240\037\246\044\223\045\355\046" +
    "\234\047\242\052\237\053\251\054\241\055\250\056\247" +
    "\057\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\014\015\235\016" +
    "\053\021\244\031\240\037\246\044\223\045\252\046\234" +
    "\047\242\052\237\053\251\054\241\055\250\056\247\057" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\254\005\051\006\050\007\047\010" +
    "\046\011\045\012\043\013\040\014\037\015\054\016\053" +
    "\017\044\020\062\021\065\027\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\257\001\001\000\002" +
    "\001\001\000\004\044\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\014\031\266" +
    "\001\001\000\002\001\001\000\040\004\267\005\051\006" +
    "\050\007\047\010\046\011\045\012\043\013\040\014\037" +
    "\015\054\016\053\017\044\020\062\021\065\027\063\001" +
    "\001\000\002\001\001\000\006\015\271\016\053\001\001" +
    "\000\004\025\272\001\001\000\002\001\001\000\040\004" +
    "\274\005\051\006\050\007\047\010\046\011\045\012\043" +
    "\013\040\014\037\015\054\016\053\017\044\020\062\021" +
    "\065\027\063\001\001\000\002\001\001\000\004\044\276" +
    "\001\001\000\002\001\001\000\040\004\300\005\051\006" +
    "\050\007\047\010\046\011\045\012\043\013\040\014\037" +
    "\015\054\016\053\017\044\020\062\021\065\027\063\001" +
    "\001\000\002\001\001\000\004\044\302\001\001\000\002" +
    "\001\001\000\004\044\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\310\005\051" +
    "\006\050\007\047\010\046\011\045\012\043\013\040\014" +
    "\037\015\054\016\053\017\044\020\062\021\065\027\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\314\005\051\006\050\007\047\010\046" +
    "\011\045\012\043\013\040\014\037\015\054\016\053\017" +
    "\044\020\062\021\065\027\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\320\016\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\323\001\001\000\004\063\335\001\001\000\040\004" +
    "\325\005\051\006\050\007\047\010\046\011\045\012\043" +
    "\013\040\014\037\015\054\016\053\017\044\020\062\021" +
    "\065\027\063\001\001\000\002\001\001\000\040\004\327" +
    "\005\051\006\050\007\047\010\046\011\045\012\043\013" +
    "\040\014\037\015\054\016\053\017\044\020\062\021\065" +
    "\027\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\333\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\341\005\051\006\050\007\047" +
    "\010\046\011\045\012\043\013\040\014\037\015\054\016" +
    "\053\017\044\020\062\021\065\027\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\350" +
    "\001\001\000\004\063\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\357\005\051\006\050\007\047\010" +
    "\046\011\045\012\043\013\040\014\037\015\054\016\053" +
    "\017\044\020\062\021\065\027\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\362\001\001\000\002" +
    "\001\001\000\004\044\364\001\001\000\002\001\001\000" +
    "\004\044\366\001\001\000\002\001\001\000\040\004\370" +
    "\005\051\006\050\007\047\010\046\011\045\012\043\013" +
    "\040\014\037\015\054\016\053\017\044\020\062\021\065" +
    "\027\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\374\001\001\000\004\061\u0105" +
    "\001\001\000\040\004\376\005\051\006\050\007\047\010" +
    "\046\011\045\012\043\013\040\014\037\015\054\016\053" +
    "\017\044\020\062\021\065\027\063\001\001\000\002\001" +
    "\001\000\042\003\014\015\235\016\053\021\244\031\240" +
    "\037\246\044\223\045\u0100\046\234\047\242\052\237\053" +
    "\251\054\241\055\250\056\247\057\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\u0103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\014\015\235\016" +
    "\053\021\244\031\240\037\246\044\223\045\u0109\046\234" +
    "\047\242\052\237\053\251\054\241\055\250\056\247\057" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\u010e\001\001\000" +
    "\004\061\u010f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\u0117\005\051" +
    "\006\050\007\047\010\046\011\045\012\043\013\040\014" +
    "\037\015\054\016\053\017\044\020\062\021\065\027\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\u011f\005\051\006\050\007" +
    "\047\010\046\011\045\012\043\013\040\014\037\015\054" +
    "\016\053\017\044\020\062\021\065\027\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\u0122\001\001" +
    "\000\002\001\001\000\004\044\u0124\001\001\000\002\001" +
    "\001\000\004\044\u0128\001\001\000\004\044\u0127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u012b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\014\031\u0132\040\u0133\001\001" +
    "\000\010\003\014\031\u0132\040\u0137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= DECLARATIONS 
            {
              Object RESULT =null;
		DefinitionList declarations = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new Program(declarations);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARATIONS ::= DECLARATION DECLARATIONS 
            {
              DefinitionList RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addVar(d); RESULT = list; d.setGlobal();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARATIONS ::= CONSTVAR DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DConst c = (DConst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addConst(c); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARATIONS ::= STRUCTDEC DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DStruct s = (DStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addStruct(s); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARATIONS ::= TYPEDEFDEC DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DTypedef t = (DTypedef)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addTypedef(t); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATIONS ::= FUNCDEC DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DFunction f = (DFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addFunc(f); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATIONS ::= IMPORTDEC DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DImport i = (DImport)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addImport(i); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARATIONS ::= 
            {
              DefinitionList RESULT =null;
		RESULT = new DefinitionList();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARATION ::= TYPE IDEN PUNTOYCOMA 
            {
              IDeclaration RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		IDeclaration var = new IDeclaration(t, name.lexema); RESULT = var;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARATION ::= TYPE IDEN IGUAL E0 PUNTOYCOMA 
            {
              IDeclaration RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		IDeclaration var = new IDeclaration(t, name.lexema, e); RESULT = var;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARATION ::= TYPE IDEN error 
            {
              IDeclaration RESULT =null;
		System.out.println("Error in declaration. It could be ; missing."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARATION ::= TYPE error 
            {
              IDeclaration RESULT =null;
		System.out.println("Error. Missing id in declaration."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASIG ::= ACCESS0 IGUAL E0 PUNTOYCOMA 
            {
              IAssignation RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IAssignation((A) a, e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIG ::= ACCESS0 OP2 IGUAL E0 PUNTOYCOMA 
            {
              IAssignation RESULT =null;
		E ac = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		KindE o = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E ex = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IAssignation((A) ac, new EBin((A) ac, ex, o, new TBasics(KindT.INT)));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIG ::= ACCESS0 IGUAL E0 error 
            {
              IAssignation RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONSTVAR ::= CONST TYPEINT IDEN IGUAL E0 PUNTOYCOMA 
            {
              DConst RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new DConst(new TBasics(KindT.INT), name.lexema, e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONSTVAR",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONSTVAR ::= CONST TYPEINT IDEN IGUAL E0 error 
            {
              DConst RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONSTVAR",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STRUCTDEC ::= STRUCT IDEN LLAP FIELDS LLCIERRE PUNTOYCOMA 
            {
              DStruct RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<IDeclaration> c = (ArrayList<IDeclaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = new DStruct(name.lexema, c);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STRUCTDEC ::= STRUCT IDEN LLAP FIELDS LLCIERRE error 
            {
              DStruct RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<IDeclaration> c = (ArrayList<IDeclaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FIELDS ::= DECLARATION FIELDS 
            {
              ArrayList<IDeclaration> RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<IDeclaration> list = (ArrayList<IDeclaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(0, d); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FIELDS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FIELDS ::= DECLARATION 
            {
              ArrayList<IDeclaration> RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayList<IDeclaration> list = new ArrayList<IDeclaration>(); list.add(0, d); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FIELDS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPEDEFDEC ::= TYPEDEF IDEN IGUAL TYPE PUNTOYCOMA 
            {
              DTypedef RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new DTypedef(name.lexema, t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEFDEC",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPEDEFDEC ::= TYPEDEF IDEN IGUAL TYPE error 
            {
              DTypedef RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEFDEC",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IMPORTDEC ::= IMP FILE PUNTOYCOMA 
            {
              DImport RESULT =null;
		TokenValue val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new DImport(val.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IMPORTDEC",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCDEC ::= IDEN PAP PARAMS PCIERRE FLECHA TYPE BINST 
            {
              DFunction RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		T tReturn = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<I> i = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new DFunction(name.lexema,i,p,tReturn);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCDEC",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCDEC ::= IDEN PAP PARAMS PCIERRE error TYPE BINST 
            {
              DFunction RESULT =null;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		System.out.println("Missing -> in " + n.lexema + " function declaration.");RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCDEC",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCDEC ::= IDEN PAP PARAMS PCIERRE FLECHA error BINST 
            {
              DFunction RESULT =null;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		System.out.println("Missing return type in " + n.lexema + " function declaration.");RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCDEC",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMS ::= PARAMLIST 
            {
              ArrayList<Parameter> RESULT =null;
		ArrayList<Parameter> list = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMS ::= 
            {
              ArrayList<Parameter> RESULT =null;
		RESULT = new ArrayList<Parameter>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMLIST ::= PARAM COMA PARAMLIST 
            {
              ArrayList<Parameter> RESULT =null;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Parameter> l = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(0, p); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMLIST",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMLIST ::= PARAM 
            {
              ArrayList<Parameter> RESULT =null;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayList<Parameter> l = new ArrayList<Parameter>(); l.add(0, p); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMLIST",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAM ::= IDEN DOSPUNTOS TYPE 
            {
              Parameter RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new Parameter(name.lexema, t, false);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAM ::= IDEN DOSPUNTOS AMPERSAND TYPE 
            {
              Parameter RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new Parameter(name.lexema, t, true);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAM ::= IDEN DOSPUNTOS error 
            {
              Parameter RESULT =null;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		System.out.println("Missing type in parameter " + n.lexema + " function declaration.");RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAM ::= IDEN error 
            {
              Parameter RESULT =null;
		System.out.println("Error. Incorrect parameter.");RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTLIST ::= INST INSTLIST 
            {
              ArrayList<I> RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(0,i); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTLIST",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTLIST ::= BLOCK INSTLIST 
            {
              ArrayList<I> RESULT =null;
		IBlock b = (IBlock)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(0, b); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTLIST",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTLIST ::= 
            {
              ArrayList<I> RESULT =null;
		RESULT = new ArrayList<I>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTLIST",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INST ::= DECLARATION 
            {
              I RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = d;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INST ::= ASIG 
            {
              I RESULT =null;
		IAssignation a = (IAssignation)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INST ::= SHOWFUNC 
            {
              I RESULT =null;
		IShow s = (IShow)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = s;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INST ::= RETURNFUNC 
            {
              I RESULT =null;
		IReturn r = (IReturn)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = r; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INST ::= INSTFUNCALL 
            {
              I RESULT =null;
		IFunction l = (IFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST ::= error PUNTOYCOMA 
            {
              I RESULT =null;
		System.out.println("Error. Instruction not recognized."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SHOWFUNC ::= SHOW PAP E0 PCIERRE PUNTOYCOMA 
            {
              IShow RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = new IShow(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SHOWFUNC",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SHOWFUNC ::= SHOW PAP E0 PCIERRE error 
            {
              IShow RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SHOWFUNC",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SHOWFUNC ::= SHOW PAP error PCIERRE PUNTOYCOMA 
            {
              IShow RESULT =null;
		System.out.println("Error in show function. Incorrect parameter."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SHOWFUNC",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // READFUNC ::= READ PAP PCIERRE 
            {
              ERead RESULT =null;
		RESULT = new ERead();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("READFUNC",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // READFUNC ::= READ PAP error PCIERRE 
            {
              ERead RESULT =null;
		System.out.println("Error in read function. Read shouldn't receive parameters."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("READFUNC",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RETURNFUNC ::= RETURN E0 PUNTOYCOMA 
            {
              IReturn RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IReturn(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURNFUNC",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RETURNFUNC ::= RETURN PUNTOYCOMA 
            {
              IReturn RESULT =null;
		RESULT = new IReturn();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURNFUNC",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RETURNFUNC ::= RETURN E0 error 
            {
              IReturn RESULT =null;
		System.out.println("Error in return."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURNFUNC",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSTFUNCALL ::= CALLFUNC PUNTOYCOMA 
            {
              IFunction RESULT =null;
		EFunction f = (EFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IFunction(f);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTFUNCALL",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INSTFUNCALL ::= CALLFUNC error 
            {
              IFunction RESULT =null;
		EFunction f = (EFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTFUNCALL",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CALLFUNC ::= IDEN PAP ARGS PCIERRE 
            {
              EFunction RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayList<E> a = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new EFunction(name.lexema, a);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CALLFUNC",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARGS ::= ARGLIST 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> l = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARGS ::= 
            {
              ArrayList<E> RESULT =null;
		RESULT = new ArrayList<E>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARGLIST ::= E0 COMA ARGLIST 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<E> l = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(0, e); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGLIST",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARGLIST ::= E0 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayList<E> l = new ArrayList<E>(); l.add(0, e); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGLIST",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOCK ::= BINST 
            {
              IBlock RESULT =null;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IBlock(list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOCK",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOCK ::= CONDITIONALS 
            {
              IBlock RESULT =null;
		IIfElse c = (IIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = c;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOCK",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOCK ::= LOOPS 
            {
              IBlock RESULT =null;
		IBlock b = (IBlock)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = b;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOCK",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOCK ::= SWITCHES 
            {
              IBlock RESULT =null;
		IBlock s = (IBlock)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = s;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOCK",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BINST ::= LLAP INSTLIST LLCIERRE 
            {
              ArrayList<I> RESULT =null;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BINST",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONDITIONALS ::= IF PAP E0 PCIERRE BINST 
            {
              IIfElse RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IIfElse(e, list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONDITIONALS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONDITIONALS ::= IF PAP E0 PCIERRE BINST ELSE BINST 
            {
              IIfElse RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<I> listIf = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> listElse = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IIfElse(e, listIf, listElse);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONDITIONALS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONDITIONALS ::= IF PAP error PCIERRE BINST 
            {
              IIfElse RESULT =null;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		System.out.println("Error in if condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONDITIONALS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LOOPS ::= WHILE PAP E0 PCIERRE BINST 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IWhile(e, list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LOOPS ::= FOR PAP DECLARATION E0 PUNTOYCOMA ACCESS0 IGUAL E0 PCIERRE BINST 
            {
              IBlock RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		E exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E exp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IFor(d, exp, new IAssignation((A) a, exp2), list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LOOPS ::= FOR PAP DECLARATION E0 PUNTOYCOMA ACCESS0 OP2 IGUAL E0 PCIERRE BINST 
            {
              IBlock RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		E exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		E ac = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		KindE o = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E ex = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IFor(d, exp, new IAssignation((A) ac, new EBin((A) ac, ex, o, new TBasics(KindT.INT))), list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LOOPS ::= REPEAT PAP E0 PCIERRE BINST 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IRepeat(e, list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LOOPS ::= WHILE PAP error PCIERRE BINST 
            {
              IBlock RESULT =null;
		System.out.println("Error in while condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LOOPS ::= FOR PAP error PCIERRE BINST 
            {
              IBlock RESULT =null;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		System.out.println("Error in for condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LOOPS ::= REPEAT PAP error PCIERRE BINST 
            {
              IBlock RESULT =null;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		System.out.println("Error in repeat condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SWITCHES ::= SWITCH PAP E0 PCIERRE LLAP CASEEXP DEFAULTEXP LLCIERRE 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<SwitchInstruction> c = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		SwitchInstruction d = (SwitchInstruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new ISwitch(e, c, d);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SWITCHES ::= SWITCH PAP E0 PCIERRE LLAP CASEEXP LLCIERRE 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<SwitchInstruction> c = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new ISwitch(e, c);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SWITCHES ::= VALUEFOR PAP ACCESS0 PCIERRE LLAP CASEEXPVF DEFAULTEXPVF LLCIERRE 
            {
              IBlock RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<ValueforInstruction> c = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ValueforInstruction d = (ValueforInstruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IValuefor((A) a, c, d);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SWITCHES ::= VALUEFOR PAP ACCESS0 PCIERRE LLAP CASEEXPVF LLCIERRE 
            {
              IBlock RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<ValueforInstruction> c = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IValuefor((A) a, c);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SWITCHES ::= SWITCH PAP error PCIERRE LLAP CASEEXP LLCIERRE 
            {
              IBlock RESULT =null;
		ArrayList<SwitchInstruction> c = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		System.out.println("Error in switch condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SWITCHES ::= SWITCH PAP error PCIERRE LLAP CASEEXP DEFAULTEXP LLCIERRE 
            {
              IBlock RESULT =null;
		ArrayList<SwitchInstruction> c = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		SwitchInstruction d = (SwitchInstruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		System.out.println("Error in switch condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SWITCHES ::= VALUEFOR PAP error PCIERRE LLAP CASEEXPVF DEFAULTEXPVF LLCIERRE 
            {
              IBlock RESULT =null;
		ArrayList<ValueforInstruction> c = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ValueforInstruction d = (ValueforInstruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		System.out.println("Error in valuefor condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SWITCHES ::= VALUEFOR PAP error PCIERRE LLAP CASEEXPVF LLCIERRE 
            {
              IBlock RESULT =null;
		ArrayList<ValueforInstruction> c = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		System.out.println("Error in valuefor condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CASEEXP ::= CASE E0 DOSPUNTOS INSTLIST BREAK PUNTOYCOMA CASEEXP 
            {
              ArrayList<SwitchInstruction> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<I> lInst = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayList<SwitchInstruction> l = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(0, new SwitchInstruction(lInst, e, true)); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXP",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASEEXP ::= 
            {
              ArrayList<SwitchInstruction> RESULT =null;
		ArrayList<SwitchInstruction> l = new ArrayList<SwitchInstruction>(); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXP",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DEFAULTEXP ::= DEFAULT DOSPUNTOS INSTLIST BREAK PUNTOYCOMA 
            {
              SwitchInstruction RESULT =null;
		ArrayList<I> l = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = new SwitchInstruction(l);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULTEXP",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CASEEXPVF ::= CASE E0 IGUAL E0 PUNTOYCOMA BREAK PUNTOYCOMA CASEEXPVF 
            {
              ArrayList<ValueforInstruction> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E result = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<ValueforInstruction> l = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(0, new ValueforInstruction(e, result, true)); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXPVF",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CASEEXPVF ::= 
            {
              ArrayList<ValueforInstruction> RESULT =null;
		ArrayList<ValueforInstruction> l = new ArrayList<ValueforInstruction>(); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXPVF",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DEFAULTEXPVF ::= DEFAULT IGUAL E0 PUNTOYCOMA BREAK PUNTOYCOMA 
            {
              ValueforInstruction RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		RESULT = new ValueforInstruction(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULTEXPVF",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DEFAULTEXPVF ::= DEFAULT IGUAL E0 error 
            {
              ValueforInstruction RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULTEXPVF",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E0 ::= E0 OR E1 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, KindE.OR, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E0 ::= E1 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E1 ::= E1 AND E2 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, KindE.AND, new TBasics(KindT.BOOL)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E1 ::= E2 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E2 ::= E2 OP0 E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.BOOL)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E2 ::= E3 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E3 ::= E3 OP1 E4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.BOOL)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E3 ::= E4 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E3 ::= NEWEXP 
            {
              E RESULT =null;
		ENew nexp = (ENew)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = nexp;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E4 ::= E4 OP2 E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E4 ::= E5 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E5 ::= E5 OP3 E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E5 ::= E6 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E6 ::= NOT E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EUnary(op1, KindE.NOT, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E6 ::= E7 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E7 ::= OP4 E7 
            {
              E RESULT =null;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EUnary(op1, operator, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E7 ::= E8 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E8 ::= ENT 
            {
              E RESULT =null;
		TokenValue value = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EConst(value.lexema, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E8 ::= TRUE 
            {
              E RESULT =null;
		TokenValue value = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EConst(value.lexema, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E8 ::= FALSE 
            {
              E RESULT =null;
		TokenValue value = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EConst(value.lexema, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E8 ::= ACCESS0 
            {
              E RESULT =null;
		E access = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = access;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E8 ::= CALLFUNC 
            {
              E RESULT =null;
		EFunction callFunc = (EFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = callFunc;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E8 ::= READFUNC 
            {
              E RESULT =null;
		ERead read = (ERead)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = read;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E8 ::= LLAP E0 E9 LLCIERRE 
            {
              E RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<E> elems = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		elems.add(0, elem); RESULT = new EArray(elems);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E9 ::= COMA E0 E9 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(0, e); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E9 ::= 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> l = new ArrayList<E>(); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP0 ::= DISTINCT 
            {
              KindE RESULT =null;
		RESULT = KindE.DISTINCT;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP0 ::= EQUAL 
            {
              KindE RESULT =null;
		RESULT = KindE.EQUAL;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP1 ::= LESS 
            {
              KindE RESULT =null;
		RESULT = KindE.LESS;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP1 ::= GREATER 
            {
              KindE RESULT =null;
		RESULT = KindE.GREATER;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP1 ::= LEQ 
            {
              KindE RESULT =null;
		RESULT = KindE.LEQ;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP1 ::= GREQ 
            {
              KindE RESULT =null;
		RESULT = KindE.GREQ;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP2 ::= SUM 
            {
              KindE RESULT =null;
		RESULT = KindE.SUM;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP2 ::= SUB 
            {
              KindE RESULT =null;
		RESULT = KindE.SUB;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OP3 ::= MUL 
            {
              KindE RESULT =null;
		RESULT = KindE.MUL;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP3 ::= DIV 
            {
              KindE RESULT =null;
		RESULT = KindE.DIV;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP3 ::= MOD 
            {
              KindE RESULT =null;
		RESULT = KindE.MOD;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OP4 ::= SUML 
            {
              KindE RESULT =null;
		RESULT = KindE.SUML;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OP4 ::= PRODL 
            {
              KindE RESULT =null;
		 RESULT = KindE.PRODL;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NEWEXP ::= NEW TYPE 
            {
              ENew RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new ENew(t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NEWEXP",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TYPE ::= TYPEINT 
            {
              T RESULT =null;
		 RESULT = new TBasics(KindT.INT);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TYPE ::= TYPEBOOL 
            {
              T RESULT =null;
		 RESULT = new TBasics(KindT.BOOL);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TYPE ::= VOID 
            {
              T RESULT =null;
		 RESULT = new TBasics(KindT.VOID);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TYPE ::= IDEN 
            {
              T RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TStruct(id.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TYPE ::= LIST LESS TYPE GREATER CAP ENT CCIERRE 
            {
              T RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 EConst sizeConst = new EConst(e.lexema, new TBasics(KindT.INT)); RESULT = new TArray(t, sizeConst);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TYPE ::= TYPE MUL 
            {
              T RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TPointer(t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ACCESS0 ::= MUL ACCESS0 
            {
              E RESULT =null;
		E na = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new APointer((A) na);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS0",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ACCESS0 ::= AMPERSAND ACCESS0 
            {
              E RESULT =null;
		E na = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new AAdPointer((A) na);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS0",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ACCESS0 ::= ACCESS1 
            {
              E RESULT =null;
		E na = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = na;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS0",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ACCESS1 ::= IDEN 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new AVariable(id.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS1",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ACCESS1 ::= ACCESS1 CAP E0 CCIERRE 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new AArray((A) a, e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS1",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ACCESS1 ::= ACCESS1 PUNTO IDEN 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new AStruct((A) a, id.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS1",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ACCESS1 ::= PAP E0 PCIERRE 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS1",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

