package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresTiny;
// import ast.*;
import java.util.ArrayList;
import ast.Types.*;
import ast.Expressions.*;
import ast.Expressions.Accesses.*;
import ast.Definitions.*;
import ast.Instructions.*;
import ast.*;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal TYPEINT, TYPEBOOL, VOID,
         SUM, SUB, MUL, DIV, MOD, SUML, PRODL, 
         GREATER, LESS, GREQ, LEQ, DISTINCT, EQUAL,
         AND, OR, NOT, PAP, PCIERRE, CAP, CCIERRE, LLAP, LLCIERRE, FLECHA,
         IGUAL, COMA, PUNTOYCOMA, AMPERSAND, PUNTO, DOSPUNTOS, 
         WHILE, FOR, REPEAT, IF, ELSE, STRUCT, SWITCH, VALUEFOR, CASE, BREAK, DEFAULT,
         RETURN, SHOW, READ, TYPEDEF, CONST, LIST, NEW, IMP;

terminal TokenValue IDEN, ENT, TRUE, FALSE, FILE;

non terminal S;

non terminal T TYPE;
non terminal E E0, E1, E2, E3, E4, E5, E6, E7, E8, ACCESS0, ACCESS1;
non terminal ENew NEWEXP;
non terminal ERead READFUNC;
non terminal EFunction CALLFUNC;
non terminal ArrayList<E> E9;
non terminal KindE OP0, OP1, OP2, OP3, OP4;
non terminal DefinitionList DECLARATIONS;
non terminal IDeclaration DECLARATION;
non terminal DConst CONSTVAR;
non terminal DStruct STRUCTDEC;
non terminal DFunction  FUNCDEC;
non terminal DImport IMPORTDEC;
non terminal DTypedef TYPEDEFDEC;
non terminal IAssignation ASIG;
non terminal ArrayList<IDeclaration> FIELDS;
non terminal Parameter PARAM;
non terminal ArrayList<Parameter> PARAMLIST, PARAMS;
non terminal ArrayList<I> BINST, INSTLIST;
non terminal IShow SHOWFUNC;
non terminal IReturn RETURNFUNC; 
non terminal ArrayList<E> ARGS, ARGLIST;
non terminal IFunction INSTFUNCALL;
non terminal IIfElse CONDITIONALS;
non terminal IBlock LOOPS, SWITCHES;
non terminal IBlock BLOCK;
non terminal I INST;
non terminal ArrayList<SwitchInstruction> CASEEXP;
non terminal SwitchInstruction DEFAULTEXP;
non terminal ArrayList<ValueforInstruction> CASEEXPVF;
non terminal ValueforInstruction DEFAULTEXPVF;
// non terminal ArrayList<DImport> IMPORTLIST;


//------------DECLARATIONes de constantes, funciones, TYPEDEF, structs y la funci√≥n main-------------- 

//----Programa Principal----
// S ::=  IMPORTLIST:imports DECLARATIONS:declarations
//      {:declarations.addImports(imports); RESULT = new Program(declarations);:};

S ::=  DECLARATIONS:declarations
      {:RESULT = new Program(declarations);:};

//----DECLARATION de variables y asignacion--

// IMPORTLIST ::= IMPORTDEC:i  IMPORTLIST:listimports
//            {:listimports.add(0, i); RESULT = listimports;:}
//            |
//          {:RESULT = new ArrayList<DImport>();:};

DECLARATIONS ::= DECLARATION:d DECLARATIONS:list
                 {:list.addVar(d); RESULT = list; d.setGlobal();:}
                 | CONSTVAR:c DECLARATIONS:list
                 {:list.addConst(c); RESULT = list;:}
                 | STRUCTDEC:s DECLARATIONS:list
                 {:list.addStruct(s); RESULT = list;:}
                 | TYPEDEFDEC:t DECLARATIONS:list
                 {:list.addTypedef(t); RESULT = list;:} 
                 | FUNCDEC:f DECLARATIONS:list
                 {:list.addFunc(f); RESULT = list;:} 
                 | IMPORTDEC:i DECLARATIONS:list
                 {:list.addImport(i); RESULT = list;:}
                 | 
                 {:RESULT = new DefinitionList();:};

DECLARATION ::= TYPE:t IDEN:name PUNTOYCOMA
                {:IDeclaration var = new IDeclaration(t, name.lexema); RESULT = var;:}
               | TYPE:t IDEN:name IGUAL E0:e PUNTOYCOMA
               {:IDeclaration var = new IDeclaration(t, name.lexema, e); RESULT = var;:}
               | TYPE IDEN error
               {:System.out.println("Error in declaration. It could be ; missing."); RESULT = null;:} //puede ser en el punto y coma o en otro lado.
               | TYPE error
               {:System.out.println("Error. Missing id in declaration."); RESULT = null;:};


ASIG ::= ACCESS0:a IGUAL E0:e PUNTOYCOMA 
         {:RESULT = new IAssignation((A) a, e);:}
         | ACCESS0:ac OP2:o IGUAL E0:ex PUNTOYCOMA 
         {:RESULT = new IAssignation((A) ac, new EBin((A) ac, ex, o, new TBasics(KindT.INT)));:}
         | ACCESS0 IGUAL E0 error
         {:System.out.println("Error. Missing ;"); RESULT = null;:};

//----Constantes----
CONSTVAR ::= CONST TYPEINT IDEN:name IGUAL E0:e PUNTOYCOMA
            {:RESULT = new DConst(new TBasics(KindT.INT), name.lexema, e);:}
            | CONST TYPEINT IDEN IGUAL E0 error 
            {:System.out.println("Error. Missing ;"); RESULT = null;:};

//----DECLARATION de Structs----
STRUCTDEC ::= STRUCT IDEN:name LLAP FIELDS:c LLCIERRE PUNTOYCOMA
            {:RESULT = new DStruct(name.lexema, c);:}
            |STRUCT IDEN:name LLAP FIELDS:c LLCIERRE error 
            {:System.out.println("Error. Missing ;"); RESULT = null;:};

FIELDS   ::= DECLARATION:d FIELDS:list
            {:list.add(0, d); RESULT = list;:}
            | DECLARATION:d
            {:ArrayList<IDeclaration> list = new ArrayList<IDeclaration>(); list.add(0, d); RESULT = list;:};

//----TYPEDEF----
TYPEDEFDEC ::= TYPEDEF IDEN:name IGUAL TYPE:t PUNTOYCOMA
              {:RESULT = new DTypedef(name.lexema, t);:}
              | TYPEDEF IDEN IGUAL TYPE error
              {:System.out.println("Error. Missing ;"); RESULT = null;:};

IMPORTDEC ::= IMP FILE:val PUNTOYCOMA
            {:RESULT = new DImport(val.lexema);:};

//----DECLARATION de funciones----
FUNCDEC ::= IDEN:name PAP PARAMS:p PCIERRE FLECHA TYPE:tReturn BINST:i 
            {:RESULT = new DFunction(name.lexema,i,p,tReturn);:}
            | IDEN:n PAP PARAMS PCIERRE error TYPE BINST 
            {:System.out.println("Missing -> in " + n.lexema + " function declaration.");RESULT = null;:}
            | IDEN:n PAP PARAMS PCIERRE FLECHA error BINST 
            {:System.out.println("Missing return type in " + n.lexema + " function declaration.");RESULT = null;:};

PARAMS ::= PARAMLIST:list
           {:RESULT = list;:}
           | 
           {:RESULT = new ArrayList<Parameter>();:};
PARAMLIST ::= PARAM:p COMA PARAMLIST:l
                {:l.add(0, p); RESULT = l;:}
                | PARAM:p
                {:ArrayList<Parameter> l = new ArrayList<Parameter>(); l.add(0, p); RESULT = l;:};
PARAM ::= IDEN:name DOSPUNTOS TYPE:t 
          {:RESULT = new Parameter(name.lexema, t, false);:}
          | IDEN:name DOSPUNTOS AMPERSAND TYPE:t 
          {:RESULT = new Parameter(name.lexema, t, true);:}
          |IDEN:n DOSPUNTOS error
          {:System.out.println("Missing type in parameter " + n.lexema + " function declaration.");RESULT = null;:}
          | IDEN error
          {:System.out.println("Error. Incorrect parameter.");RESULT = null;:};

//-------------------------------Instrucciones---------------------------------------------

//----Listas de instrucciones----
INSTLIST ::= INST:i INSTLIST:list
              {:list.add(0,i); RESULT = list;:}
              | BLOCK:b INSTLIST:list
              {:list.add(0, b); RESULT = list;:} 
              | 
              {:RESULT = new ArrayList<I>();:};

INST ::= DECLARATION:d
         {:RESULT = d;:}
         | ASIG:a 
         {:RESULT = a;:} 
         | SHOWFUNC:s
         {:RESULT = s;:}
         | RETURNFUNC:r
         {:RESULT = r; :}
         | INSTFUNCALL:l
         {:RESULT = l;:} 
         | error PUNTOYCOMA
         {:System.out.println("Error. Instruction not recognized."); RESULT = null;:};

//----Show----
SHOWFUNC ::= SHOW PAP E0:e PCIERRE PUNTOYCOMA 
            {:RESULT = new IShow(e);:}
            |SHOW PAP E0 PCIERRE error 
            {:System.out.println("Error. Missing ;"); RESULT = null;:}
            |SHOW PAP error PCIERRE PUNTOYCOMA 
            {:System.out.println("Error in show function. Incorrect parameter."); RESULT = null;:} ;

//----Read----
READFUNC ::= READ PAP PCIERRE
            {:RESULT = new ERead();:}
            | READ PAP error PCIERRE
            {:System.out.println("Error in read function. Read shouldn't receive parameters."); RESULT = null;:};

//----Return----
RETURNFUNC ::= RETURN E0:e PUNTOYCOMA 
               {:RESULT = new IReturn(e);:}
               | RETURN PUNTOYCOMA 
               {:RESULT = new IReturn();:}
               | RETURN E0 error 
               {:System.out.println("Error in return."); RESULT = null;:};

INSTFUNCALL ::= CALLFUNC:f PUNTOYCOMA
                {:RESULT = new IFunction(f);:}
                | CALLFUNC:f error
                {:System.out.println("Error. Missing ;"); RESULT = null;:};

//----LLamada a funcion----
CALLFUNC ::= IDEN:name PAP ARGS:a PCIERRE
             {:RESULT = new EFunction(name.lexema, a);:};  

ARGS ::= ARGLIST:l
         {:RESULT = l;:}
         | 
         {:RESULT = new ArrayList<E>();:};
ARGLIST ::= E0:e COMA ARGLIST:l
              {:l.add(0, e); RESULT = l;:}
              | E0:e 
              {:ArrayList<E> l = new ArrayList<E>(); l.add(0, e); RESULT = l;:};

//--------------------BLOCKs, CONDITIONALS, LOOPS y Switches--------------------------

//----BLOCKs----
BLOCK ::= BINST:list
      {:RESULT = new IBlock(list);:}
       | CONDITIONALS:c
       {:RESULT = c;:}
       | LOOPS:b
       {:RESULT = b;:}
       | SWITCHES:s
       {:RESULT = s;:};

BINST ::= LLAP INSTLIST:list LLCIERRE
          {:RESULT = list;:};

//----CONDITIONALS----
CONDITIONALS ::= IF PAP E0:e PCIERRE BINST:list
                  {:RESULT = new IIfElse(e, list);:}
                  | IF PAP E0:e PCIERRE BINST:listIf ELSE BINST:listElse
                   {:RESULT = new IIfElse(e, listIf, listElse);:}
                  | IF PAP error PCIERRE BINST:list
                  {:System.out.println("Error in if condition."); RESULT = null;:};

//----LOOPS----
LOOPS ::= WHILE PAP E0:e PCIERRE BINST:list
           {:RESULT = new IWhile(e, list);:}
           | FOR PAP DECLARATION:d E0:exp PUNTOYCOMA ACCESS0:a IGUAL E0:exp2 PCIERRE BINST:list 
           {:RESULT = new IFor(d, exp, new IAssignation((A) a, exp2), list);:}
           | FOR PAP DECLARATION:d E0:exp PUNTOYCOMA ACCESS0:ac OP2:o IGUAL E0:ex PCIERRE BINST:list 
           {:RESULT = new IFor(d, exp, new IAssignation((A) ac, new EBin((A) ac, ex, o, new TBasics(KindT.INT))), list);:}
           | REPEAT PAP E0:e PCIERRE BINST:list
           {:RESULT = new IRepeat(e, list);:}
           |WHILE PAP error PCIERRE BINST
           {:System.out.println("Error in while condition."); RESULT = null;:}
           | FOR PAP error PCIERRE BINST:list 
           {:System.out.println("Error in for condition."); RESULT = null;:}
           | REPEAT PAP error PCIERRE BINST:list
           {:System.out.println("Error in repeat condition."); RESULT = null;:};

//----Switches----
SWITCHES ::= SWITCH PAP E0:e PCIERRE LLAP CASEEXP:c DEFAULTEXP:d LLCIERRE
            {:RESULT = new ISwitch(e, c, d);:}
            | SWITCH PAP E0:e PCIERRE LLAP CASEEXP:c LLCIERRE 
            {:RESULT = new ISwitch(e, c);:}
            | VALUEFOR PAP ACCESS0:a PCIERRE LLAP CASEEXPVF:c DEFAULTEXPVF:d LLCIERRE 
            {:RESULT = new IValuefor((A) a, c, d);:}
            | VALUEFOR PAP ACCESS0:a PCIERRE LLAP CASEEXPVF:c LLCIERRE 
            {:RESULT = new IValuefor((A) a, c);:}
            | SWITCH PAP error PCIERRE LLAP CASEEXP:c LLCIERRE 
            {:System.out.println("Error in switch condition."); RESULT = null;:}
            |SWITCH PAP error PCIERRE LLAP CASEEXP:c DEFAULTEXP:d LLCIERRE
            {:System.out.println("Error in switch condition."); RESULT = null;:}
            | VALUEFOR PAP error PCIERRE LLAP CASEEXPVF:c DEFAULTEXPVF:d LLCIERRE 
            {:System.out.println("Error in valuefor condition."); RESULT = null;:}
            | VALUEFOR PAP error PCIERRE LLAP CASEEXPVF:c LLCIERRE 
            {:System.out.println("Error in valuefor condition."); RESULT = null;:};

CASEEXP	::= CASE E0:e DOSPUNTOS INSTLIST:lInst BREAK PUNTOYCOMA CASEEXP:l
            {:l.add(0, new SwitchInstruction(lInst, e, true)); RESULT = l;:}
            | 
            {:ArrayList<SwitchInstruction> l = new ArrayList<SwitchInstruction>(); RESULT = l;:};

DEFAULTEXP ::= DEFAULT DOSPUNTOS INSTLIST:l BREAK PUNTOYCOMA
               {:RESULT = new SwitchInstruction(l);:};

// aqui no hemos recuperado errores de puntos y comas.

CASEEXPVF ::= CASE E0:e IGUAL E0:result PUNTOYCOMA BREAK PUNTOYCOMA CASEEXPVF:l
              {:l.add(0, new ValueforInstruction(e, result, true)); RESULT = l;:}
              | 
              {:ArrayList<ValueforInstruction> l = new ArrayList<ValueforInstruction>(); RESULT = l;:};

DEFAULTEXPVF ::= DEFAULT IGUAL E0:e PUNTOYCOMA BREAK PUNTOYCOMA
              {:RESULT = new ValueforInstruction(e);:}
              | DEFAULT IGUAL E0 error 
              {:System.out.println("Error. Missing ;"); RESULT = null;:};



//-------------------------------------Expresiones----------------------------------------

//----Expresiones----
E0 ::= E0:op1 OR E1:op2
      {: RESULT = new EBin(op1, op2, KindE.OR, new TBasics(KindT.BOOL));:}
      | E1:e 
      {:RESULT = e;:};

E1 ::= E1:op1 AND E2:op2
      {: RESULT = new EBin(op1, op2, KindE.AND, new TBasics(KindT.BOOL)); :}
      | E2:e 
      {:RESULT = e;:};

E2 ::= E2:op1 OP0:operator E3:op2 
      {: RESULT = new EBin(op1, op2, operator, new TBasics(KindT.BOOL)); :}
      | E3:e 
      {:RESULT = e;:};

E3 ::= E3:op1 OP1:operator E4:op2
      {: RESULT = new EBin(op1, op2, operator, new TBasics(KindT.BOOL)); :}
      | E4:e
      {:RESULT = e;:}
      | NEWEXP:nexp 
      {:RESULT = nexp;:};

E4 ::= E4:op1 OP2:operator E5:op2 
      {: RESULT = new EBin(op1, op2, operator, new TBasics(KindT.INT));:}
      | E5:e
      {:RESULT = e;:} ;

E5 ::= E5:op1 OP3:operator E6:op2
      {: RESULT = new EBin(op1, op2, operator, new TBasics(KindT.INT));:}
      | E6:e 
      {:RESULT = e;:};

E6 ::= NOT E6:op1 
      {:RESULT = new EUnary(op1, KindE.NOT, new TBasics(KindT.BOOL));:}
      | E7:e 
      {:RESULT = e;:};

E7 ::= OP4:operator E7:op1
      {:RESULT = new EUnary(op1, operator, new TBasics(KindT.INT));:} //estos operadores solo se pueden con arrays de enteros
      | E8:e 
      {:RESULT = e;:};

E8 ::= ENT:value
      {:RESULT = new EConst(value.lexema, new TBasics(KindT.INT));:}
      | TRUE:value
      {:RESULT = new EConst(value.lexema, new TBasics(KindT.BOOL));:} 
      | FALSE:value
      {:RESULT = new EConst(value.lexema, new TBasics(KindT.BOOL));:} 
      | ACCESS0:access 
      {:RESULT = access;:} 
      | CALLFUNC:callFunc
      {:RESULT = callFunc;:} 
      | READFUNC:read
      {:RESULT = read;:} 
      | LLAP E0:elem E9:elems LLCIERRE
      {:elems.add(0, elem); RESULT = new EArray(elems);:};

E9 ::= COMA E0:e E9:list 
      {:list.add(0, e); RESULT = list;:}
      | 
      {:ArrayList<E> l = new ArrayList<E>(); RESULT = l;:};

//----Operadores----
OP0 ::= DISTINCT
      {:RESULT = KindE.DISTINCT;:}
      | EQUAL
      {:RESULT = KindE.EQUAL;:};

OP1 ::= LESS
       {:RESULT = KindE.LESS;:}
       | GREATER
       {:RESULT = KindE.GREATER;:}
       | LEQ
       {:RESULT = KindE.LEQ;:} 
       | GREQ
       {:RESULT = KindE.GREQ;:};

OP2 ::= SUM
      {:RESULT = KindE.SUM;:}
      | SUB
      {:RESULT = KindE.SUB;:};

OP3 ::= MUL
       {:RESULT = KindE.MUL;:}
       | DIV
       {:RESULT = KindE.DIV;:} 
       | MOD
       {:RESULT = KindE.MOD;:};

OP4 ::= SUML
      {:RESULT = KindE.SUML;:}
      | PRODL
      {: RESULT = KindE.PRODL;:} ;

//----New--------
NEWEXP ::= NEW TYPE:t 
         {:RESULT = new ENew(t);:};

//--------------------------------------Tipos--------------------------------------------
TYPE ::= TYPEINT
         {: RESULT = new TBasics(KindT.INT);:}
         | TYPEBOOL 
         {: RESULT = new TBasics(KindT.BOOL);:}
         | VOID 
         {: RESULT = new TBasics(KindT.VOID);:}
         | IDEN:id
         {: RESULT = new TStruct(id.lexema);:}
         | LIST LESS TYPE:t GREATER CAP ENT:e CCIERRE
         {: EConst sizeConst = new EConst(e.lexema, new TBasics(KindT.INT)); RESULT = new TArray(t, sizeConst);:}
         | TYPE:t MUL 
         {: RESULT = new TPointer(t);:};

//-------------------------------------ACCESS0s------------------------------------------

ACCESS0 ::= MUL ACCESS0:na
            {: RESULT = new APointer((A) na);:} 
            | AMPERSAND ACCESS0:na 
            {:RESULT = new AAdPointer((A) na);:}
            | ACCESS1:na
            {:RESULT = na;:};

ACCESS1 ::= IDEN:id
           {: RESULT = new AVariable(id.lexema);:}
           | ACCESS1:a CAP E0:e CCIERRE 
          {:RESULT = new AArray((A) a, e);:}
          | ACCESS1:a PUNTO IDEN:id
          {:RESULT = new AStruct((A) a, id.lexema);:} 
          | PAP E0:e PCIERRE
          {:RESULT = e;:};
       